---
- name: test zoo_distr_dir
  stat: path={{ zoo_root_dir }}/{{ zoo_distr_name }}
  register: zoo_distr_dir

- name: Unpack Apache zookeeper
  unarchive:
    src: '{{ zoo_distr }}'
    dest: '{{ zoo_root_dir }}'
    copy: yes
  when: zoo_distr_dir.stat.isdir is undefined or (not zoo_distr_dir.stat.isdir)
  
- name: Create a symbolic link
  file:
    src: "{{ zoo_root_dir }}/{{ zoo_distr_name }}"
    dest: "{{ zoo_dir }}"
    owner: kafka
    group: kafka
    state: link

- name: Create a zookeeper data directory if it does not exist
  file:
    path: '{{ zoo_data_dir }}'
    state: directory

- name: Template configuration file to zoo.cfg
  template:
    src: zoo.cfg.j2
    dest: '{{ zoo_dir }}/conf/zoo.cfg'
  tags:
    - reconfigure
  notify:
    - restart zookeeper service 
    - restart kafka service
    
- name: Create id file
  shell: "echo '{{ node_id }}' > {{ zoo_data_dir }}/myid"
  tags:
    - reconfigure

- name: Recursively change ownership of a zookeeper directory
  file:
    path: '{{ zoo_dir }}'
    state: directory
    recurse: yes
    owner: '{{ kafka_user }}'
    group: '{{ kafka_group }}'
  tags:
    - reconfigure

- name: Recursively change ownership of a zookeeper data directory
  file:
    path: '{{ zoo_data_dir }}'
    state: directory
    recurse: yes
    owner: '{{ kafka_user }}'
    group: '{{ kafka_group }}'
  tags:
    - reconfigure

- name: Open port for zookeeper
  firewalld:
    port: 7000/tcp
    permanent: yes
    state: enabled
    immediate: yes

- name: Create a jmx-explorer directory if it does not exist
  file:
    path: '{{ jmx_dir }}'
    state: directory

- name: Copy jmx-explorer
  copy:
    src: jmx-exporter.jar
    dest: "{{ jmx_dir }}/jmx-exporter.jar"

- name: Open port for zookeeper jmx-exporter
  firewalld:
    port: 7070/tcp
    permanent: yes
    state: enabled
    immediate: yes

- name: Copy zookeeper temple for jmx-explorer
  copy:
    src: zookeeper.yml
    dest: "{{ jmx_dir }}/zookeeper.yml"

- name: Configure zookeeper to worck with jmx-exporter
  lineinfile:
    path: '{{ zoo_dir }}/bin/zkEnv.sh'
    regexp: 'export SERVER_JVMFLAGS='
    line: 'export SERVER_JVMFLAGS="-javaagent:{{ jmx_dir }}/jmx-exporter.jar=7070:{{ jmx_dir }}/zookeeper.yml"'

- name: Template configuration file to zookeeper.service
  template:
    src: zookeeper.service.j2
    dest: '/etc/systemd/system/zookeeper.service'
  tags:
    - reconfigure
  notify:
    - restart zookeeper service 
  

- name: enable and start zookeeper.service
  systemd:
    name: zookeeper
    state: started
    enabled: yes
    daemon_reload: yes
